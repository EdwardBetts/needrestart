#!/usr/bin/perl

# needrestart - Restart daemons after library updates.
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2013 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use Getopt::Std;
use Term::Query qw(query);

use warnings;
use strict;

$|++;

my %nrconf = (
    procfs => '/proc',
    verbose => 0,
    hook_d => '/etc/needrestart/hook.d',
    restart => 'i',
    defno => 0,
);

our $opt_c = '/etc/needrestart/needrestart.conf';
our $opt_v;
our $opt_r = $nrconf{restart};
our $opt_l;
our $opt_i;
our $opt_a;
our $opt_n;
getopts('c:vr:lian');

die "ERROR: Could not read config file '$opt_c'!\n" unless(-r $opt_c);

eval `cat "$opt_c"`;
die "\n" if($@);

$nrconf{verbose}++ if($opt_v);
die "Hook directory '$nrconf{hook_d}' is invalid!\n" unless(-d $nrconf{hook_d});
die "ERROR: Unknown 'restart' option!\n" unless($opt_r =~ /^(l|i|a)$/);

die "You must not specify -l, -i or -a simultanously!\n"
    if(($opt_l && $opt_i) || ($opt_l && $opt_a) || ($opt_i && $opt_a));

if($opt_l) {
    $nrconf{restart} = 'l';
}
elsif($opt_i) {
    $nrconf{restart} = 'i';
}
elsif($opt_a) {
    $nrconf{restart} = 'a';
}

$nrconf{defno}++ if($opt_n);

warn "WARNING: This program should be run as root!\n" if($< != 0);

sub fork_pipe(@) {
    my $pid = open(HPIPE, '-|');
    defined($pid) || die "Can't fork: $!\n";

    if($pid == 0) {
	close(STDIN);
	close(STDERR) unless($nrconf{verbose});

	exec(@_);
	exit;
    }

    \*HPIPE
}

my %restart;

# inspect only pids
for my $pid (map {/^$nrconf{procfs}\/(\d+)$/ ? ($1) : ()} <$nrconf{procfs}/*>) {
    # read file mappings (Linux 2.0+)
    open(HMAP, '<', "$nrconf{procfs}/$pid/maps") || next;
    my $restart = 0;
    while(<HMAP>) {
	chomp;
	my ($maddr, $mperm, $moffset, $mdev, $minode, $path) = split(/\s+/);

	# skip special handles and non-executable mappings
	next unless($minode != 0 && $path ne '' && $mperm =~ /x/);

	# get on-disk info
	my ($sdev, $sinode) = stat($path);
	last unless(defined($sinode));
	$sdev = sprintf("%02x:%02x", $sdev >> 8, $sdev & 0xff);

	# compare maps content vs. on-disk
	if($mdev ne $sdev || $minode ne $sinode) {
	    $restart++;
	    last;
	}
    }
    close(HMAP);

    # restart needed?
    next unless($restart);

    # get executable (Linux 2.2+)
    my $bin = readlink("$nrconf{procfs}/$pid/exe");
    next unless(defined($bin));

    my @run = ("--arg=$bin", '--exit-on-error', '--', "$nrconf{hook_d}");
    unshift(@run, qw(--verbose --arg=-v)) if($nrconf{verbose});
    unshift(@run, 'run-parts');

    my $prun = fork_pipe(@run);

    my $pkg = "<UNPACKAGED>";
    while(<$prun>) {
	chomp;
	my @v = split(/\|/);

	if($v[0] eq 'PACKAGE' && $v[1]) {
	    $pkg = $v[1];
	    next;
	}

	$restart{$pkg}->{$v[1]}++ if($v[0] eq 'RC');
    }
}

unless(scalar %restart) {
    print "No services needed to be restarted.\n";
    exit 0;
}

print "Services needed to be restarted:\n";
foreach my $pkg (keys %restart) {
    print "\n$pkg:\n";

    foreach my $rc (keys %{$restart{$pkg}}) {
	print " - ";

	my $r = 0;
	if($nrconf{restart} eq 'i') {
	    $r = query("Restart $rc?", ($nrconf{defno} ? 'N' : 'Y')) eq 'yes';
	}
	elsif($nrconf{restart} eq 'a') {
	    print "auto-restart $rc\n";
	    $r++;
	}
	else {
	    print "$rc\n";
	}

	system("/etc/init.d/$rc", 'restart') if($r);
    }
}
